from time import time
import inspect


def profile(foo):
    def profile_decorator(*args, **kwargs):
        t_before = time()
        print('`{}` started '.format(foo.__name__))
        res = foo(*args, **kwargs)
        t_after = time()
        d_t = t_after - t_before
        print('`{}` finished in {}'.format(foo.__name__, str(d_t)))
        return res

    class NewCls(object):
        def __init__(self, *args, **kwargs):
            self.oInstance = foo(*args, **kwargs)

        def __getattribute__(self, s):
            try:
                x = super(NewCls, self).__getattribute__(s)
            except AttributeError:
                pass
            else:
                return x
            x = self.oInstance.__getattribute__(s)
            if type(x) == type(self.__init__):
                return profile(x)
            else:
                return x

    if inspect.isclass(foo):
        return NewCls
    else:
        return profile_decorator


@profile
class Something:
    def __init__(self, a=1):
        self.a = 1
        pass

    def foo(self):
        print(self.a)
        pass


@profile
def spam():
    pass


if __name__ == '__main__':
    spam()
    s = Something()
    s.foo()
